// Code generated by MockGen. DO NOT EDIT.
// Source: bcrypt.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBcryptService is a mock of BcryptService interface
type MockBcryptService struct {
	ctrl     *gomock.Controller
	recorder *MockBcryptServiceMockRecorder
}

// MockBcryptServiceMockRecorder is the mock recorder for MockBcryptService
type MockBcryptServiceMockRecorder struct {
	mock *MockBcryptService
}

// NewMockBcryptService creates a new mock instance
func NewMockBcryptService(ctrl *gomock.Controller) *MockBcryptService {
	mock := &MockBcryptService{ctrl: ctrl}
	mock.recorder = &MockBcryptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBcryptService) EXPECT() *MockBcryptServiceMockRecorder {
	return m.recorder
}

// GenerateFromPassword mocks base method
func (m *MockBcryptService) GenerateFromPassword(password []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromPassword", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFromPassword indicates an expected call of GenerateFromPassword
func (mr *MockBcryptServiceMockRecorder) GenerateFromPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromPassword", reflect.TypeOf((*MockBcryptService)(nil).GenerateFromPassword), password)
}

// CompareHashAndPassword mocks base method
func (m *MockBcryptService) CompareHashAndPassword(hash, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hash, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword
func (mr *MockBcryptServiceMockRecorder) CompareHashAndPassword(hash, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockBcryptService)(nil).CompareHashAndPassword), hash, password)
}
